.\" The MIT License (MIT)
.\"
.\" Copyright (c) 2019 Vincent Davis
.\" <vincedav2495@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is hereby granted, free of charge, to any person obtaining a copy
.\" of this software and associated documentation files (the "Software"), to deal
.\" in the Software without restriction, including without limitation the rights
.\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.\" copies of the Software, and to permit persons to whom the Software is
.\" furnished to do so, subject to the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be included in
.\" all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.\" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.\" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
.\" THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.TH WLU_VKALL_H 3 "29 June 2019" "1.0" "WLU Vulkan All Header Man Page"
.SH BRIEF DESCRIPTION
Wayland Lucurious Vulkan All Header

.SH SYNOPSIS
.nf
.B #include <wlu/vkall.h>
.PP

.BR "struct swap_chain_buffers " "{"
.BR "\tVkImage " "image";
.BR "\tVkImageView " "view";
};

.BR "struct queue_family_indices " "{"
.BR "\tuint32_t " "graphics_family";
.BR "\tuint32_t " "present_family";
};

.BR "struct vkcomp " "{"
.BR "\tVkInstance " "instance";
.BR "\tVkSurfaceKHR " "surface";

.BR "\tVkLayerProperties " "*vk_layer_props";
.BR "\tuint32_t " "vk_layer_count";

.BR "\tVkExtensionProperties " "*ep_instance_props";
.BR "\tuint32_t " "ep_instance_count";

.BR "\tVkExtensionProperties " "*ep_device_props";
.BR "\tuint32_t " "ep_device_count";

.BR "\tVkPhysicalDeviceProperties " "device_properties";
.BR "\tVkPhysicalDeviceFeatures " "device_features";
.BR "\tVkPhysicalDeviceMemoryProperties " "memory_properties";
.BR "\tVkPhysicalDevice " "physical_device";

.BR "\tVkDeviceQueueCreateInfo " "*queue_create_infos";
.BR "\tVkQueueFamilyProperties " "*queue_families";
.BR "\tuint32_t " "queue_family_count";
.BR "\tstruct queue_family_indices " "indices";

.BR "\tVkDevice " "device";
.BR "\tVkQueue " "graphics_queue";

.BR "\tstruct swap_chain_buffers " "*sc_buffs";
.BR "\tVkSwapchainKHR " "swap_chain";
.BR "\tVkFormat " "sc_img_fmt";
.BR "\tVkExtent2D " "sc_extent";
.BR "\tuint32_t " "img_count";
};

.BR "" struct " vkcomp *wlu_init_vk()";
.BR "" VkResult " wlu_set_global_layers(struct vkcomp " "*app");
.BR "" VkResult " wlu_create_instance(struct vkcomp " "*app" ", char " "*app_name" ", char " "*engine_name");
.BR "" VkResult " wlu_enumerate_devices(struct vkcomp " "*app" ", VkQueueFlagBits " "vkqfbits" ", VkPhysicalDeviceType " "vkpdtype");
.BR "" VkResult " wlu_set_logical_device(struct vkcomp " "*app");
.BR "" VkResult " wlu_vkconnect_surfaceKHR(struct vkcomp " "*app" ", void " "*wl_display" ", void " "*wl_surface");
.BR "" VkResult " wlu_create_swap_chain(struct vkcomp " "*app");
.BR "" VkResult " wlu_create_img_views(struct vkcomp " "*app" ", enum wlu_image" "type");
.BR "" VkResult " wlu_create_graphics_pipeline(struct vkcomp " "*app");
.BR "" void " wlu_freeup_vk(void " "*data");
.fi
.PP
.nf
.pp
.SH DESCRIPTION
.PP

.B "struct swap_chain_buffers"

.BR "\tVkImage image"

VkImage is the acutal image object that represents multidimensional (up to 3) arrays of data.
Data of which has various purposes (e.g. attachments, textures) and can be utilized by binding images
to a graphics or compute pipeline via descriptor sets.

.BR "\tVkImageView view"

VkImage objects are not accessed by the shaders pipeline directly. So, VkImageViews that represent
ranges of image subresources (The number of mipmap levels and array layers) and metadata are used for
said purpose. Views must contain images of the same type and must have valid subsets of image subresources.

.B "struct queue_family_indices"

Almost every operation in Vulkan, anything from drawing to uploading textures, requires
commands to be submitted to a queue. Different queue families produce different types of
queues and each queue family allows for a subset of commands.

.BR "\tuint32_t graphics_family"

\tIs equal to the queue family index that has support for the graphics bit that is set in wlu_enumerate_devices(3)
(eg. VK_QUEUE_GRAPHICS_BIT). For more info visit
.I https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkQueueFlagBits.html

.BR "\tuint32_t present_family"

\tIs equal to the queue family index that allows a device to present images to a surface.
For more info visit

.I https://khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkGetPhysicalDeviceSurfaceSupportKHR.html

.B "struct vkcomp"

.BR "\tVkInstance instance"

\tThe instance variable is used to set a VkInstance. A VkInstance is the way your app/liblucurious.so connects to the vulkan library.

.BR "\tVkSurfaceKHR surface"

\tThe surface variable represents an abstract type of surface to present rendered images to. Also used to destroy VkSurfaceKHR objects.

.BR "\tVkLayerProperties *vk_layer_props"

\tThe vk_layer_props pointer holdes all validation layers extensions that comes installed with the vulkan sdk

.BR "\tuint32_t vk_layer_count"

\tThe vk_layer_count variable keeps track of the amount of validation layer are available

.BR "\tVkExtensionProperties *ep_instance_props"

\tThe ep_instance_props keeps track of all available instance extensions.
To print a list of device instance extensions type "lucur --pie" in your terminal

.BR "\tuint32_t ep_instance_count"

\tThe ep_instance_count keeps track of the amount of instance extensions are available for a device.

.BR "\tVkExtensionProperties *ep_device_props"

.BR "\tuint32_t ep_device_count"

.BR "\tVkPhysicalDeviceProperties device_properties"

.BR "\tVkPhysicalDeviceFeatures device_features"

.BR "\tVkPhysicalDeviceMemoryProperties memory_properties"

.BR "\tVkPhysicalDevice physical_device"

.BR "\tVkDeviceQueueCreateInfo *queue_create_infos"

.BR "\tVkQueueFamilyProperties *queue_families"

.BR "\tuint32_t queue_family_count"

.BR "\tstruct queue_family_indices indices"

.BR "\tVkDevice device"

.BR "\tVkQueue graphics_queue"

.BR "\tstruct swap_chain_buffers *sc_buffs"

.BR "\tVkSwapchainKHR swap_chain"

.BR "\tVkFormat sc_img_fmt"

.BR "\tVkExtent2D sc_extent"

.BR "\tuint32_t img_count"

.SH SEE_ALSO
.B "wlu_init_wc(3)" "," "wlu_set_global_layers(3)" "," "wlu_create_instance(3)" ","
.B "wlu_vkconnect_surfaceKHR(3)" "," "wlu_enumerate_devices(3)" "," "wlu_set_logical_device(3)" ","
.B "wlu_create_swap_chain(3)" "," "wlu_create_img_views(3)" "," "wlu_freeup_vk(3)" "," "wlu_image(3)"

.SH AUTHOR
Vincent Davis (vincedav2495@gmail.com)
